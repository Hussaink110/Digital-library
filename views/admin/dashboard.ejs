<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Digital Library</title>
    <meta name="csrf-token" content="<%= csrfToken %>">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <nav class="admin-nav">
        <div class="container">
            <h1>Digital Library - Admin</h1>
            <div class="nav-actions" style="display:flex; gap: 0.5rem;">
                <button class="btn btn-small" id="themeToggle" title="Toggle theme">🌙</button>
                <a href="/" class="btn">View Website</a>
                <a href="/admin/requests" class="btn">Requests</a>
                <a href="/admin/logout" class="btn btn-danger">Logout</a>
            </div>
            <button class="btn btn-small menu-toggle" id="menuToggle" aria-label="Open menu">☰</button>
            <div class="mobile-menu-panel" id="mobileMenu">
                <a href="/" class="btn btn-small">View Website</a>
                <a href="/admin/upload" class="btn btn-small">Upload</a>
                <a href="/admin/analytics" class="btn btn-small">Analytics</a>
                <a href="/admin/requests" class="btn btn-small">Requests</a>
                <a href="/admin/logout" class="btn btn-small btn-danger">Logout</a>
            </div>
        </div>
    </nav>

    <div class="container">
        <div class="admin-header">
            <div>
                <h2>Dashboard</h2>
                <div id="bulkActions" class="bulk-actions" style="display: none; margin-top: 1rem;">
                    <span id="selectedCount">0 selected</span>
                    <button class="btn btn-danger btn-small" onclick="bulkDeleteBooks()">Delete Selected</button>
                    <button class="btn btn-small" onclick="clearSelection()">Clear Selection</button>
                </div>
            </div>
            <div style="display: flex; gap: 0.5rem;">
                <a href="/admin/analytics" class="btn">Analytics</a>
                <a href="/admin/upload" class="btn btn-primary">Upload New Book</a>
            </div>
        </div>

        <% if (typeof success !== 'undefined') { %>
            <div class="alert alert-success">Book uploaded successfully!</div>
        <% } %>
        <% if (typeof updated !== 'undefined') { %>
            <div class="alert alert-success">Book updated successfully!</div>
        <% } %>

        <div class="tabs-nav" style="display:flex; gap:0.5rem; margin:0.5rem 0 0.75rem 0;">
            <button id="tabBtnBooks" class="btn btn-small">Books</button>
            <button id="tabBtnSubs" class="btn btn-small">Manage Subscriptions</button>
        </div>

        <div id="tab-books" class="admin-tab" style="display:block;">
          <div class="admin-controls">
              <label class="checkbox-label">
                  <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                  <span>Select All</span>
              </label>
          </div>

          <div class="books-grid" id="adminBooks" style="margin-top:0.75rem;">
              <p>Loading books...</p>
          </div>
        </div><!-- /tab-books -->

        <section id="tab-subs" class="upload-form-container admin-tab" style="margin-top:1rem; max-width:840px; display:none;">
            <h3 style="margin-bottom:0.5rem;">Manage User Subscriptions</h3>
            <p style="color:#7f8c8d; margin-top:0;">Search by exact user email, then grant or cancel a 30‑day subscription.</p>
            <div style="display:flex; gap:0.75rem; align-items:flex-end; flex-wrap:wrap;">
                <div class="form-group" style="min-width:260px;">
                    <label for="subEmail">User Email</label>
                    <input type="email" id="subEmail" placeholder="user@example.com">
                </div>
                <button id="btnFind" class="btn" onclick="findUser()">Find User</button>
                <div id="subMsg" style="margin-left:0; flex:1 1 100%; display:none;" class="alert"></div>
            </div>
            <div id="userInfo" style="margin-top:0.75rem; font-size:0.95rem; background:#f6f8fa; border:1px solid #e1e4e8; border-radius:8px; padding:0.75rem; display:none;"></div>

            <div style="margin-top:0.75rem; padding:0.75rem; border:1px dashed #dfe2e5; border-radius:8px;">
                <h4 style="margin:0 0 0.5rem 0;">Create User</h4>
                <div style="display:flex; gap:0.75rem; align-items:flex-end; flex-wrap:wrap;">
                    <div class="form-group">
                        <label for="newUserName">Name</label>
                        <input type="text" id="newUserName" placeholder="Optional name">
                    </div>
                    <div class="form-group">
                        <label for="newUserEmail">Email</label>
                        <input type="email" id="newUserEmail" placeholder="user@example.com">
                    </div>
                    <div class="form-group">
                        <label for="newUserPhone">Phone</label>
                        <input type="tel" id="newUserPhone" placeholder="e.g. 98765 43210">
                    </div>
                    <button id="btnCreateUser" class="btn" onclick="createUser()">Create</button>
                    <div id="createMsg" class="alert" style="display:none; margin-left:0; flex:1 1 100%;"></div>
                </div>
            </div>

            <div style="display:flex; gap:0.5rem; align-items:center; margin-top:0.75rem; flex-wrap:wrap;">
                <label style="margin-right:0.25rem;">Grant plan:</label>
                <select id="planSelect">
                    <option value="basic">Basic (10 reads / 5 downloads)</option>
                    <option value="premium">Premium (100 reads / 25 downloads)</option>
                </select>
                <button id="btnGrant" class="btn btn-primary" onclick="grantSub()" disabled>Grant 30 days</button>
                <button id="btnCancel" class="btn btn-danger" onclick="cancelSub()" disabled>Cancel now</button>
            </div>

            <hr style="margin:1rem 0; border:none; border-top:1px solid #e1e4e8;">

            <div>
              <h4 style="margin:0 0 0.5rem 0;">Users</h4>
              <div style="display:flex; gap:0.5rem; align-items:flex-end; flex-wrap:wrap;">
                <div class="form-group">
                  <label for="userSearch">Search</label>
                  <input id="userSearch" type="text" placeholder="Name or email">
                </div>
                <div class="form-group">
                  <label for="userSort">Sort</label>
                  <select id="userSort">
                    <option value="createdAt">Created</option>
                    <option value="email">Email</option>
                    <option value="subscription_status">Status</option>
                    <option value="subscription_plan">Plan</option>
                    <option value="subscription_end">Ends</option>
                  </select>
                </div>
                <div class="form-group">
                  <label for="userOrder">Order</label>
                  <select id="userOrder">
                    <option value="desc">Desc</option>
                    <option value="asc">Asc</option>
                  </select>
                </div>
                <div class="form-group">
                  <label for="userLimit">Page size</label>
                  <select id="userLimit">
                    <option>10</option>
                    <option>20</option>
                    <option>50</option>
                  </select>
                </div>
                <button id="btnUsersRefresh" class="btn" onclick="loadUsers()">Refresh</button>
                <div id="usersMsg" class="alert" style="display:none; flex:1 1 100%;"></div>
              </div>

              <div class="table-wrapper" style="margin-top:0.5rem;">
                <table class="analytics-table" id="usersTable">
                  <thead>
                    <tr>
                      <th style="width:32px;"><input type="checkbox" id="usersSelectAll"></th>
                      <th>Name</th>
                      <th>Email</th>
                      <th>Phone</th>
                      <th>Plan</th>
                      <th>Status</th>
                      <th>Ends</th>
                      <th>Created</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="usersTbody">
                    <tr><td colspan="9">Loading...</td></tr>
                  </tbody>
                </table>
              </div>

              <div style="display:flex; justify-content:space-between; align-items:center; margin-top:0.5rem; flex-wrap:wrap; gap:0.5rem;">
                <div>
                  <label>Bulk plan:</label>
                  <select id="bulkPlan">
                    <option value="basic">Basic</option>
                    <option value="premium">Premium</option>
                  </select>
                  <button id="btnBulkGrant" class="btn btn-primary btn-small" onclick="bulkGrant()" disabled>Grant 30 days</button>
                  <button id="btnBulkCancel" class="btn btn-danger btn-small" onclick="bulkCancel()" disabled>Cancel</button>
                </div>
                <div>
                  <button class="btn btn-small" id="usersPrev">Prev</button>
                  <span id="usersPageInfo">Page 1</span>
                  <button class="btn btn-small" id="usersNext">Next</button>
                </div>
              </div>
            </div>
        </section>

        <div class="books-grid" id="adminBooks">
            <p>Loading books...</p>
        </div>
    </div>

    <script>
        // Mobile menu
        (function(){
            const menuBtn = document.getElementById('menuToggle');
            const menu = document.getElementById('mobileMenu');
            if (menuBtn && menu) {
                menuBtn.addEventListener('click', () => menu.classList.toggle('show'));
                document.addEventListener('click', (e)=>{ if (!menu.contains(e.target) && e.target !== menuBtn) menu.classList.remove('show'); });
            }
        })();

        // Theme toggle
        (function(){
            const btn = document.getElementById('themeToggle');
            const apply = (mode) => { document.body.classList.toggle('dark', mode === 'dark'); if(btn) btn.textContent = mode === 'dark' ? '☀️' : '🌙'; };
            const stored = localStorage.getItem('theme');
            const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            apply(stored || (prefersDark ? 'dark' : 'light'));
            if (btn) btn.addEventListener('click', () => {
                const isDark = document.body.classList.toggle('dark');
                if (btn) btn.textContent = isDark ? '☀️' : '🌙';
                localStorage.setItem('theme', isDark ? 'dark' : 'light');
            });
        })();

        // Back to top
        (function(){
            const btt = document.createElement('button');
            btt.id = 'backToTop'; btt.className = 'back-to-top'; btt.textContent = '↑'; btt.title = 'Back to top';
            document.body.appendChild(btt);
            window.addEventListener('scroll', () => { if (window.scrollY > 300) btt.classList.add('show'); else btt.classList.remove('show'); });
            btt.addEventListener('click', () => window.scrollTo({ top: 0, behavior: 'smooth' }));
        })();

        // Simple tabs for admin dashboard
        const tabBooks = document.getElementById('tab-books');
        const tabSubs = document.getElementById('tab-subs');
        const btnBooks = document.getElementById('tabBtnBooks');
        const btnSubs = document.getElementById('tabBtnSubs');
        function setActive(tab){
            if (!tabBooks || !tabSubs || !btnBooks || !btnSubs) return;
            const showBooks = tab === 'books';
            tabBooks.style.display = showBooks ? 'block' : 'none';
            tabSubs.style.display = showBooks ? 'none' : 'block';
            btnBooks.classList.toggle('btn-primary', showBooks);
            btnSubs.classList.toggle('btn-primary', !showBooks);
            try { localStorage.setItem('adminTab', tab); } catch {}
        }
        if (btnBooks && btnSubs){
            btnBooks.addEventListener('click', () => setActive('books'));
            btnSubs.addEventListener('click', () => setActive('subs'));
            const saved = (localStorage.getItem('adminTab') || 'books');
            setActive(saved);
        }

        // CSRF token helper
        const CSRF_TOKEN = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        function setMsg(type, text){
            const box = document.getElementById('subMsg');
            box.style.display = 'block';
            box.className = 'alert ' + (type === 'error' ? 'alert-error' : 'alert-success');
            box.textContent = text;
        }
        function clearMsg(){ const box = document.getElementById('subMsg'); box.style.display='none'; box.textContent=''; }
        function enableActions(enabled){
            document.getElementById('btnFind').disabled = !enabled;
            const g = document.getElementById('btnGrant');
            const c = document.getElementById('btnCancel');
            g.disabled = !enabled || !window.__subUserId;
            c.disabled = !enabled || !window.__subUserId;
        }
        async function findUser(){
            clearMsg();
            const email = document.getElementById('subEmail').value.trim();
            if (!email) { setMsg('error','Please enter an email.'); return; }
            enableActions(false);
            try {
                const res = await fetch(`/admin/users/find?email=${encodeURIComponent(email)}`, { headers: { 'CSRF-Token': CSRF_TOKEN } });
                const data = await res.json();
                if (!res.ok) { setMsg('error', data.error || 'User not found'); window.__subUserId = null; document.getElementById('userInfo').style.display='none'; enableActions(true); return; }
                window.__subUserId = data.id;
                document.getElementById('userInfo').style.display='block';
                document.getElementById('userInfo').innerHTML = `
                    <div><strong>${data.name || ''}</strong> <code>${data.email}</code></div>
                    <div style="margin-top:0.25rem;">Plan: <b>${data.subscription_plan}</b> • Status: <b>${data.subscription_status}</b></div>
                    <div>Ends: ${data.subscription_end ? new Date(data.subscription_end).toLocaleDateString() : '-'}</div>
                    <div>Used this period: Reads ${data.reads_used} / Downloads ${data.downloads_used}</div>
                `;
                setMsg('success','User loaded. You can now grant or cancel.');
            } catch (e) { setMsg('error','Lookup failed.'); }
            finally { enableActions(true); }
        }
        async function grantSub(){
            if (!window.__subUserId) { setMsg('error','Find user first.'); return; }
            clearMsg();
            enableActions(false);
            const plan = document.getElementById('planSelect').value;
            try {
                const res = await fetch(`/admin/users/${window.__subUserId}/subscription`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF_TOKEN },
                    body: JSON.stringify({ plan })
                });
                const data = await res.json();
                if (!res.ok) { setMsg('error', data.error || 'Grant failed'); return; }
                setMsg('success','Subscription granted for 30 days.');
                await findUser();
            } catch (e) { setMsg('error','Grant failed.'); }
            finally { enableActions(true); }
        }
        async function cancelSub(){
            if (!window.__subUserId) { setMsg('error','Find user first.'); return; }
            clearMsg();
            enableActions(false);
            try {
                const res = await fetch(`/admin/users/${window.__subUserId}/subscription/cancel`, {
                    method: 'POST',
                    headers: { 'CSRF-Token': CSRF_TOKEN }
                });
                const data = await res.json();
                if (!res.ok) { setMsg('error', data.error || 'Cancel failed'); return; }
                setMsg('success','Subscription canceled.');
                await findUser();
            } catch (e) { setMsg('error','Cancel failed.'); }
            finally { enableActions(true); }
        }

        function setCreateMsg(type, text){
            const box = document.getElementById('createMsg');
            box.style.display='block';
            box.className = 'alert ' + (type === 'error' ? 'alert-error' : 'alert-success');
            box.textContent = text;
        }
        function clearCreateMsg(){ const box=document.getElementById('createMsg'); box.style.display='none'; box.textContent=''; }
        async function createUser(){
            clearCreateMsg();
            const name = document.getElementById('newUserName').value.trim();
            const email = document.getElementById('newUserEmail').value.trim();
            if (!email) { setCreateMsg('error','Enter email.'); return; }
            document.getElementById('btnCreateUser').disabled = true;
            try {
                const res = await fetch('/admin/users', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF_TOKEN },
                    body: JSON.stringify({ name, email, phone: document.getElementById('newUserPhone')?.value.trim() || '' })
                });
                const data = await res.json();
                if (!res.ok) { setCreateMsg('error', data.error || 'Create failed'); return; }
                setCreateMsg('success', `User created. Temp password: ${data.tempPassword}`);
                // Prefill lookup field with new email and load
                const lookup = document.getElementById('subEmail');
                lookup.value = data.user.email;
                await findUser();
              } catch (e) { setCreateMsg('error','Create failed.'); }
              finally { document.getElementById('btnCreateUser').disabled = false; }
        }

        function deleteBook(id) {
            if (!confirm('Are you sure you want to delete this book?')) return;
            
            fetch(`/admin/books/${id}`, { method: 'DELETE', headers: { 'CSRF-Token': CSRF_TOKEN } })
                .then(res => res.json())
                .then(() => {
                    location.reload();
                })
                .catch(err => alert('Error deleting book: ' + err));
        }

        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.book-select');
            checkboxes.forEach(cb => cb.checked = selectAll.checked);
            updateBulkActions();
        }

        function updateBulkActions() {
            const checkboxes = document.querySelectorAll('.book-select:checked');
            const count = checkboxes.length;
            const bulkActions = document.getElementById('bulkActions');
            const selectedCount = document.getElementById('selectedCount');
            const selectAll = document.getElementById('selectAll');
            
            selectedCount.textContent = `${count} selected`;
            bulkActions.style.display = count > 0 ? 'flex' : 'none';
            
            // Update select all checkbox state
            const allCheckboxes = document.querySelectorAll('.book-select');
            selectAll.checked = allCheckboxes.length > 0 && count === allCheckboxes.length;
        }

        function clearSelection() {
            document.querySelectorAll('.book-select').forEach(cb => cb.checked = false);
            document.getElementById('selectAll').checked = false;
            updateBulkActions();
        }

        function bulkDeleteBooks() {
            const checkboxes = document.querySelectorAll('.book-select:checked');
            const bookIds = Array.from(checkboxes).map(cb => cb.value);
            
            if (bookIds.length === 0) return;
            
            const confirmMsg = `Are you sure you want to delete ${bookIds.length} book(s)? This action cannot be undone.`;
            if (!confirm(confirmMsg)) return;
            
            fetch('/admin/books/bulk-delete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF_TOKEN },
                body: JSON.stringify({ bookIds })
            })
            .then(res => res.json())
            .then(data => {
                alert(data.message);
                location.reload();
            })
            .catch(err => alert('Error deleting books: ' + err));
        }

        // ===== Users table logic =====
        let usersPage=1, usersLimit=10, usersSort='createdAt', usersOrder='desc', usersSearch='';
        const sel = new Set();
        const usersMsg = document.getElementById('usersMsg');
        function setUsersMsg(type,text){ if(!usersMsg)return; usersMsg.style.display='block'; usersMsg.className='alert '+(type==='error'?'alert-error':'alert-success'); usersMsg.textContent=text; }
        function clearUsersMsg(){ if(!usersMsg)return; usersMsg.style.display='none'; usersMsg.textContent=''; }
        function updateBulkButtons(){ const any=sel.size>0; const g=document.getElementById('btnBulkGrant'); const c=document.getElementById('btnBulkCancel'); if(g) g.disabled=!any; if(c) c.disabled=!any; }
        function bindUsersControls(){
          const sb=document.getElementById('userSearch'); if(sb){ sb.value=usersSearch; sb.oninput=()=>{ usersSearch=sb.value.trim(); debounceLoad(); }; }
          const sf=document.getElementById('userSort'); if(sf){ sf.value=usersSort; sf.onchange=()=>{ usersSort=sf.value; loadUsers(); }; }
          const so=document.getElementById('userOrder'); if(so){ so.value=usersOrder; so.onchange=()=>{ usersOrder=so.value; loadUsers(); }; }
          const sl=document.getElementById('userLimit'); if(sl){ sl.value=String(usersLimit); sl.onchange=()=>{ usersLimit=parseInt(sl.value,10)||10; usersPage=1; loadUsers(); }; }
          const pa=document.getElementById('usersPrev'); if(pa){ pa.onclick=()=>{ if(usersPage>1){ usersPage--; loadUsers(); } }; }
          const pn=document.getElementById('usersNext'); if(pn){ pn.onclick=()=>{ usersPage++; loadUsers(); }; }
          const sa=document.getElementById('usersSelectAll'); if(sa){ sa.checked=false; sa.onchange=()=>{ const boxes=document.querySelectorAll('.user-select'); boxes.forEach(b=>{ b.checked=sa.checked; if(b.checked) sel.add(b.value); else sel.delete(b.value); }); updateBulkButtons(); }; }
        }
        let debounceTimer=null; function debounceLoad(){ clearTimeout(debounceTimer); debounceTimer=setTimeout(()=>{ usersPage=1; loadUsers(); }, 300); }
        async function loadUsers(){
          clearUsersMsg(); const tbody=document.getElementById('usersTbody'); const info=document.getElementById('usersPageInfo'); if(tbody) tbody.innerHTML='<tr><td colspan="8">Loading...</td></tr>';
          try{
            const q = new URLSearchParams({ page:String(usersPage), limit:String(usersLimit), sort:usersSort, order:usersOrder, search:usersSearch });
            const res = await fetch(`/admin/users?${q.toString()}`, { headers:{ 'CSRF-Token': CSRF_TOKEN } });
            if(!res.ok) throw new Error('http_'+res.status);
            const data = await res.json();
            const items = data.items || [];
            if(tbody){
              if(items.length===0){ tbody.innerHTML='<tr><td colspan="9">No users found.</td></tr>'; }
              else {
                tbody.innerHTML = items.map(u=>{
                  const id=String(u._id||u.id);
                  const ends = u.subscription_end ? new Date(u.subscription_end).toLocaleDateString() : '-';
                  const created = u.createdAt ? new Date(u.createdAt).toLocaleDateString() : '-';
                  const checked = sel.has(id) ? 'checked' : '';
                  return `
                    <tr>
                      <td><input type="checkbox" class="user-select" value="${id}" ${checked}></td>
                      <td>${u.name||''}</td>
                      <td><code>${u.email}</code></td>
                      <td>${u.phone||'-'}</td>
                      <td>${u.subscription_plan||'none'}</td>
                      <td>${u.subscription_status||'none'}</td>
                      <td>${ends}</td>
                      <td>${created}</td>
                      <td>
                        <button class="btn btn-small" onclick="rowGrant('${id}')">Grant</button>
                        <button class="btn btn-small btn-danger" onclick="rowCancel('${id}')">Cancel</button>
                      </td>
                    </tr>`;
                }).join('');
              }
              // bind row checkbox changes
              Array.from(document.querySelectorAll('.user-select')).forEach(b=>{
                b.addEventListener('change',()=>{ if(b.checked) sel.add(b.value); else sel.delete(b.value); updateBulkButtons(); });
              });
            }
            if(info) info.textContent = `Page ${data.page} • ${data.total} users`;
          } catch(e){ console.error(e); setUsersMsg('error','Failed to load users'); if(tbody) tbody.innerHTML='<tr><td colspan="8">Error</td></tr>'; }
        }
        async function rowGrant(id){
          try{
            const plan = document.getElementById('bulkPlan')?.value || 'basic';
            const res = await fetch(`/admin/users/${id}/subscription`, { method:'POST', headers:{ 'Content-Type':'application/json','CSRF-Token': CSRF_TOKEN }, body: JSON.stringify({ plan }) });
            const data = await res.json(); if(!res.ok){ setUsersMsg('error', data.error||'Grant failed'); return; }
            setUsersMsg('success','Granted successfully'); loadUsers();
          }catch(e){ setUsersMsg('error','Grant failed'); }
        }
        async function rowCancel(id){
          try{
            const res = await fetch(`/admin/users/${id}/subscription/cancel`, { method:'POST', headers:{ 'CSRF-Token': CSRF_TOKEN } });
            const data = await res.json(); if(!res.ok){ setUsersMsg('error', data.error||'Cancel failed'); return; }
            setUsersMsg('success','Canceled successfully'); loadUsers();
          }catch(e){ setUsersMsg('error','Cancel failed'); }
        }
        async function bulkGrant(){ if(sel.size===0) return; try{ const ids=[...sel]; const plan=document.getElementById('bulkPlan')?.value||'basic'; const res=await fetch('/admin/users/bulk/subscription',{ method:'POST', headers:{ 'Content-Type':'application/json','CSRF-Token': CSRF_TOKEN }, body: JSON.stringify({ ids, action:'grant', plan }) }); const data=await res.json(); if(!res.ok){ setUsersMsg('error', data.error||'Bulk grant failed'); return; } setUsersMsg('success',`Granted ${data.count} user(s)`); sel.clear(); updateBulkButtons(); loadUsers(); } catch(e){ setUsersMsg('error','Bulk grant failed'); } }
        async function bulkCancel(){ if(sel.size===0) return; try{ const ids=[...sel]; const res=await fetch('/admin/users/bulk/subscription',{ method:'POST', headers:{ 'Content-Type':'application/json','CSRF-Token': CSRF_TOKEN }, body: JSON.stringify({ ids, action:'cancel' }) }); const data=await res.json(); if(!res.ok){ setUsersMsg('error', data.error||'Bulk cancel failed'); return; } setUsersMsg('success',`Canceled ${data.count} user(s)`); sel.clear(); updateBulkButtons(); loadUsers(); } catch(e){ setUsersMsg('error','Bulk cancel failed'); } }
        // initial bind and load when tab visible
        bindUsersControls(); loadUsers();
    </script>
</body>
</html>
